<token> ::= <symbol>
          | <integer>
          | <operator>
          | <keyword>
          | <comment>
          | <paren>
          | <error>
          | <whitespace>
          | <newline>
          | <bool>
          | <comparison>
          | <print>
          | <bracket>
          | <curly_bracket>
          | <type>
          | <deref>
          | <cast>

<symbol> ::= <letter>+

<integer> ::= <digit>+

<operator> ::= "+"
             | "add"
             | "-"
             | "sub"
             | "*"
             | "mul"
             | "/"
             | "div"
             | "%"
             | "//"
             | "="
             | ";"
             | "::"
             | "<"
             | "<="
             | ">"
             | ">="
             | "!="

<keyword> ::= "define"
            | "lambda"
            | "if"
            | "then"
            | "else"
            | "elif"
            | "eq?"
            | "mutable"
            | "while"
            | "for"
            | "as"

<comment> ::= "#" <text>

<paren> ::= "(" | ")"

<error> ::= <other>

<whitespace> ::= " "

<newline> ::= "\n"

<bool> ::= "true" | "false" | "#t" | "#f"

<comparison> ::= "<" | "<=" | ">" | ">=" | "eq?" | "!="

<print> ::= "print"

<bracket> ::= "[" | "]"

<curly_bracket> ::= "{" | "}"

<type> ::= "int" | "bool" | "float" | "@"

<deref> ::= "::"

<cast> ::= "as"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<letter> ::= [a-z]

<semicolon> ::= ";"

<expression> ::= <integer>
            | <bool>
            | <symbol>
            | <symbol_declaration>

<symbol_declaration> ::= <type> <symbol> <semicolon>

<text> ::= <letter>+

<other> ::= <token>

<list> ::= "[" <expression>+ "]"

<func> ::= <type> <text> "(" <arg_list> ")" "{" <statement_list> "}"

<arg_list> ::= <argument> | <argument> "," <arg_list>
<argument> ::= <type> " " <text>

<statement_list> ::= <statement> | <statement> <statement_list>
<statement> ::= <expression_statement> | <if_statement> | <for_statement> | <jmp_statment>

<expression_statement> ::= <expression> ";"

<if_statement> ::= "if" "(" <expression> ")" "{" <statement_list> "}" <elif_statement> <else_statement>
<elif_statement> ::= "elif" "(" <expression> ")" "{" <statement_list> "}" <elif_statement> | " "
<else_statement> ::= "else" "{" <statement_list> "}" | " "

<for_statement> ::= "for" "(" <expression_statement> <expression> ";" <expression> ")" "{" <statement_list> "}"

<jmp_statment> ::= "continue" ";" | "break" ";" | <return_statement>

<return_statement> ::= "return" <expression> ";"

<binary_expression> ::= <expression> <operator> <expression>

<mutable> ::= <type> " " <text> " = " <expression>

<lambda> ::= "(" <text> ") => {" <statement_list> "}"

<func_call> ::= <text> "(" <arg_list> ")"

<set_mutable> ::= <symbol> "=" <expression> <semicolon>
<inc_mutable> ::= <symbol> "++" <semicolon>
<dec_mutable> ::= <symbol> "--" <semicolon>
